import os
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from sentence_transformers import SentenceTransformer, util
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL", "questions.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP –º–æ–¥–µ–ª–∏
model = SentenceTransformer("all-MiniLM-L6-v2")

def init_db():
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT UNIQUE,
            answer TEXT
        )
    ''')
    conn.commit()
    conn.close()

async def search_in_db(question: str):
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NLP"""
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT question, answer FROM questions")
    rows = cursor.fetchall()
    conn.close()
    
    if not rows:
        return None
    
    questions = [row[0] for row in rows]
    embeddings = model.encode(questions, convert_to_tensor=True)
    query_embedding = model.encode(question, convert_to_tensor=True)
    
    scores = util.pytorch_cos_sim(query_embedding, embeddings)[0]
    best_match_idx = scores.argmax().item()
    
    if scores[best_match_idx] > 0.75:  # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
        return rows[best_match_idx][1]
    return None

async def save_to_db(question: str, answer: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞-–æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO questions (question, answer) VALUES (?, ?)", (question, answer))
    conn.commit()
    conn.close()

async def get_ai_response(question: str):
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI GPT-4"""
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã RenderGuru ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –≤ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."},
            {"role": "user", "content": question}
        ]
    )
    return response["choices"][0]["message"]["content"].strip()

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø RenderGuru. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!")

@dp.message_handler()
async def handle_message(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    
    answer = await search_in_db(message.text)
    if answer:
        await message.answer(answer)
        return
    
    ai_answer = await get_ai_response(message.text)
    await save_to_db(message.text, ai_answer)
    await message.answer(ai_answer)

if __name__ == "__main__":
    init_db()
    logging.info("üöÄ –ë–æ—Ç RenderGuru –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
