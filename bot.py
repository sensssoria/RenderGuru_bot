import os
import asyncio
import asyncpg
import openai
import numpy as np
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from sentence_transformers import SentenceTransformer

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
DATABASE_URL = os.getenv("DATABASE_URL")  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # API-–∫–ª—é—á OpenAI

if not TOKEN or not DATABASE_URL or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API_TOKEN, DATABASE_URL –∏–ª–∏ OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ‚úÖ NLP-–º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª—É
model = SentenceTransformer("all-MiniLM-L6-v2")

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ============

async def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS knowledge_base (
            id SERIAL PRIMARY KEY,
            question TEXT UNIQUE NOT NULL,
            answer TEXT NOT NULL,
            embedding VECTOR(384)
        );

        CREATE TABLE IF NOT EXISTS bot_admins (
            user_id BIGINT PRIMARY KEY
        );
    """)
    await conn.close()

async def search_in_db(question: str):
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î –ø–æ —Å–º—ã—Å–ª—É"""
    query_embedding = model.encode(question).tolist()
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT answer, embedding FROM knowledge_base")
    await conn.close()

    if not rows:
        return None

    best_match = None
    best_score = -1

    for row in rows:
        stored_embedding = np.array(row["embedding"])
        score = np.dot(query_embedding, stored_embedding) / (np.linalg.norm(query_embedding) * np.linalg.norm(stored_embedding))

        if score > 0.75:  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            best_match = row["answer"]

    return best_match

async def save_to_db(question: str, answer: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è –≤ –ë–î"""
    embedding = model.encode(question).tolist()
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO knowledge_base (question, answer, embedding) VALUES ($1, $2, $3) ON CONFLICT (question) DO NOTHING",
        question, answer, embedding
    )
    await conn.close()

async def get_available_gpt_model():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ OpenAI –¥–æ—Å—Ç—É–ø–Ω—ã"""
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.Model.list()
        available_models = [model["id"] for model in response["data"]]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenAI: {available_models}")

        if "gpt-4o" in available_models:
            return "gpt-4o"
        elif "gpt-4" in available_models:
            return "gpt-4"
        elif "gpt-3.5-turbo" in available_models:
            return "gpt-3.5-turbo"
        else:
            print("‚ö† OpenAI –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏.")
            return None
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return None

async def get_openai_answer(question: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI, –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"""
    openai.api_key = OPENAI_API_KEY
    model_name = await get_available_gpt_model()
    
    if not model_name:
        return "‚ö† OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π."

    try:
        response = openai.ChatCompletion.create(
            model=model_name,
            messages=[{"role": "user", "content": question}],
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}"

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ============

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø RenderGuru. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!")

@dp.message(Command("ask"))
async def ask_cmd(message: Message):
    question = message.text.replace("/ask", "").strip()
    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π `/ask –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å`.")
        return

    answer = await search_in_db(question)
    if answer:
        await message.answer(answer)
    else:
        ai_answer = await get_openai_answer(question)
        await message.answer(ai_answer)
        await save_to_db(question, ai_answer)

@dp.message(Command("learn"))
async def learn_cmd(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    await bot.register_next_step_handler(message, get_question)

async def get_question(message: Message):
    question = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    await bot.register_next_step_handler(message, get_answer, question)

async def get_answer(message: Message, question):
    answer = message.text
    await save_to_db(question, answer)
    await message.answer("‚úÖ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ù–ê POLLING ============

async def main():
    print("üöÄ –ë–æ—Ç RenderGuru –∑–∞–ø—É—â–µ–Ω...")
    await init_db()
    try:
        await bot.delete_webhook(drop_pending_updates=True)  # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º Webhook, –µ—Å–ª–∏ –±—ã–ª
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
