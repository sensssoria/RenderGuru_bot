import os
import asyncio
import logging
import asyncpg
from dotenv import load_dotenv
from transformers import pipeline
import torch

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.filters.text import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DATABASE_URL:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API_TOKEN –∏–ª–∏ DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ‚úÖ NLP-–º–æ–¥–µ–ª—å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
device = "cuda" if torch.cuda.is_available() else "cpu"
nlp_model = pipeline("feature-extraction", model="sentence-transformers/all-MiniLM-L6-v2", device=0 if device == "cuda" else -1)

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ============

async def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS bot_settings (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL
        );

        CREATE TABLE IF NOT EXISTS bot_admins (
            user_id BIGINT PRIMARY KEY,
            role TEXT NOT NULL DEFAULT 'admin'
        );

        CREATE TABLE IF NOT EXISTS knowledge_base (
            id SERIAL PRIMARY KEY,
            question TEXT UNIQUE NOT NULL,
            question_tsv tsvector,
            answer TEXT NOT NULL
        );

        CREATE INDEX IF NOT EXISTS question_tsv_idx ON knowledge_base USING GIN (question_tsv);
    """)
    await conn.close()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT COUNT(*) FROM bot_admins WHERE user_id = $1", user_id)
    await conn.close()
    return result > 0

# ============ –ú–ï–ù–Æ ============

def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å"), KeyboardButton(text="–£—á–∏—Ç—å")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")],
        ],
        resize_keyboard=True
    )

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ============

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –ø–æ–∏—Å–∫–æ–º –∏ –æ–±—É—á–µ–Ω–∏–µ–º.\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É –∏–ª–∏ –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç!",
        reply_markup=main_menu()
    )

@dp.message(Text("–ü–æ–º–æ—â—å"))
async def help_cmd(message: Message):
    await message.answer(
        "üîπ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        " - –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –ë–î üìö\n"
        " - –ö–Ω–æ–ø–∫–∞ '–£—á–∏—Ç—å' (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ public_learn=off) üßë‚Äçüè´\n"
        " - –ö–Ω–æ–ø–∫–∞ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ' (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏) ‚öôÔ∏è\n"
        " - `/add_admin <id>` ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ üë§\n"
        " - `/remove_admin <id>` ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚ùå\n"
        " - `/set_public_learn on/off` ‚Äî –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–º üîß"
    )

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ============

@dp.message(Text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é.")
        return

    await message.answer(
        "üîß –í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        " - `/add_admin <id>` ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        " - `/remove_admin <id>` ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        " - `/set_public_learn on/off` ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
    )

@dp.message(Command("add_admin"))
async def add_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        user_id = int(message.text.split()[1])
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("INSERT INTO bot_admins (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)
        await conn.close()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_admin <id>`")

@dp.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        user_id = int(message.text.split()[1])
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("DELETE FROM bot_admins WHERE user_id = $1", user_id)
        await conn.close()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_admin <id>`")

# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê ============

async def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
