import os
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, Boolean, Text, DateTime, JSON, func, select
from sentence_transformers import SentenceTransformer
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("No API_TOKEN provided in environment")

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("No DATABASE_URL provided in environment")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class KnowledgeBase(Base):
    __tablename__ = "knowledge_base"
    id = Column(Integer, primary_key=True)
    question = Column(Text, nullable=False)
    answer = Column(Text, nullable=False)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, onupdate=func.now())
    created_by = Column(Integer)

class BotAdmin(Base):
    __tablename__ = "bot_admins"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True, nullable=False)
    username = Column(String(255))
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())

class BotSettings(Base):
    __tablename__ = "bot_settings"
    id = Column(Integer, primary_key=True)
    key = Column(String(255), unique=True, nullable=False)
    value = Column(JSON)
    updated_at = Column(DateTime, onupdate=func.now())

class UserQuery(Base):
    __tablename__ = "user_queries"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    query = Column(Text, nullable=False)
    response = Column(Text)
    created_at = Column(DateTime, server_default=func.now())
    success = Column(Boolean, default=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState:
    def __init__(self):
        self.states: Dict[int, Dict[str, Any]] = {}

    def get_state(self, user_id: int) -> Optional[str]:
        return self.states.get(user_id, {}).get('state')

    def set_state(self, user_id: int, state: str, **kwargs):
        self.states[user_id] = {'state': state, **kwargs}

    def clear_state(self, user_id: int):
        if user_id in self.states:
            del self.states[user_id]

user_state = UserState()

# NLP –º–æ–¥–µ–ª—å
nlp_model = SentenceTransformer('all-MiniLM-L6-v2')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception as e:
            await session.rollback()
            logger.error(f"Database error: {e}")
            raise
        finally:
            await session.close()

async def ensure_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    async for session in get_db():
        result = await session.execute(
            select(BotAdmin).where(
                BotAdmin.user_id == user_id,
                BotAdmin.is_active == True
            )
        )
        return bool(result.scalar_one_or_none())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin: bool = False):
    keyboard = [
        [
            InlineKeyboardButton(text="‚ùì –°–ø—Ä–æ—Å–∏—Ç—å", callback_data="ask"),
            InlineKeyboardButton(text="üìö –£—á–∏—Ç—å", callback_data="learn")
        ],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if is_admin:
        keyboard.append([
            InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="bot_settings")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    admin_status = await is_admin(user_id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø RenderGuru - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=admin_status)
    )

@dp.callback_query(lambda c: c.data == "ask")
async def process_ask(callback_query: types.CallbackQuery):
    user_state.set_state(callback_query.from_user.id, "waiting_for_question")
    await callback_query.message.edit_text(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

@dp.message(lambda message: user_state.get_state(message.from_user.id) == "waiting_for_question")
async def handle_question(message: types.Message):
    question = message.text.strip()
    user_id = message.from_user.id
    
    try:
        async for session in get_db():
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            similar_questions = await session.execute(
                """
                SELECT question, answer, similarity(question, :query) as sim
                FROM knowledge_base
                WHERE similarity(question, :query) > 0.3
                ORDER BY sim DESC
                LIMIT 1
                """,
                {"query": question}
            )
            result = similar_questions.first()

            if result:
                answer = result.answer
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI
                response = await openai.ChatCompletion.acreate(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"},
                        {"role": "user", "content": question}
                    ]
                )
                answer = response.choices[0].message.content

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
                new_knowledge = KnowledgeBase(
                    question=question,
                    answer=answer,
                    created_by=user_id
                )
                session.add(new_knowledge)
                await session.commit()

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            query_log = UserQuery(
                user_id=user_id,
                query=question,
                response=answer,
                success=True
            )
            session.add(query_log)
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.answer(
                answer,
                reply_markup=get_main_keyboard(is_admin=await is_admin(user_id))
            )
            user_state.clear_state(user_id)

    except Exception as e:
        logger.error(f"Error processing question: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=await is_admin(user_id))
        )
        user_state.clear_state(user_id)

@dp.callback_query(lambda c: c.data == "admin")
async def process_admin(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_admin(user_id):
        await callback_query.message.edit_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@dp.callback_query(lambda c: c.data == "learn")
async def process_learn(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state.set_state(user_id, "waiting_for_learn_question")
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

@dp.message(lambda message: user_state.get_state(message.from_user.id) == "waiting_for_learn_question")
async def handle_learn_question(message: types.Message):
    user_id = message.from_user.id
    user_state.set_state(user_id, "waiting_for_learn_answer", question=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")

@dp.message(lambda message: user_state.get_state(message.from_user.id) == "waiting_for_learn_answer")
async def handle_learn_answer(message: types.Message):
    user_id = message.from_user.id
    state_data = user_state.states[user_id]
    question = state_data.get('question')
    
    try:
        async for session in get_db():
            new_knowledge = KnowledgeBase(
                question=question,
                answer=message.text,
                created_by=user_id
            )
            session.add(new_knowledge)
            await session.commit()

        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.",
            reply_markup=get_main_keyboard(is_admin=await is_admin(user_id))
        )
    except Exception as e:
        logger.error(f"Error saving knowledge: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=await is_admin(user_id))
        )
    
    user_state.clear_state(user_id)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state.clear_state(user_id)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=await is_admin(user_id))
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    try:
        await ensure_tables()
        logger.info("Database tables checked/created")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
