import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN', '7867162876:AAGikAKxu1HIVXwQC8RfqRib2MPlDsrTk6c')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_knowledge_base():
    kb_path = Path('knowledge_base.json')
    if kb_path.exists():
        with open(kb_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "questions": {},  # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        "topics": {      # –¢–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã
            "3ds_max": ["–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            "corona": ["–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
            "vray": ["–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]
        }
    }

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
def save_knowledge_base(knowledge_base):
    with open('knowledge_base.json', 'w', encoding='utf-8') as f:
        json.dump(knowledge_base, f, ensure_ascii=False, indent=2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø RenderGuru - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏! üé®\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ:\n"
        "- 3Ds Max\n"
        "- Corona Renderer\n"
        "- V-Ray\n"
        "- –¢–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é\n"
        "- –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/learn —Ç–µ–º–∞ "–≤–æ–ø—Ä–æ—Å" "–æ—Ç–≤–µ—Ç" - –ù–∞—É—á–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤–æ–º—É
/topics - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –≤ Corona?
- –ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç–µ–∫–ª–∞?
- –ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä?
    """
    await update.message.reply_text(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn
async def learn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /learn —Ç–µ–º–∞ \"–≤–æ–ø—Ä–æ—Å\" \"–æ—Ç–≤–µ—Ç\"\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /learn corona \"–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ?\" \"–î–ª—è –±–∞–∑–æ–≤–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ...\""
        )
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    knowledge_base = load_knowledge_base()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    topic = context.args[0].lower()
    question = ' '.join(context.args[1:-1]).lower()
    answer = context.args[-1]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ
    if question not in knowledge_base["questions"]:
        knowledge_base["questions"][question] = {
            "answer": answer,
            "topic": topic,
            "rating": 0,  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            "used_count": 0  # –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }
        save_knowledge_base(knowledge_base)
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '{question}'")
    else:
        await update.message.reply_text("–Ø —É–∂–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    knowledge_base = load_knowledge_base()
    
    # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ
    best_match = None
    best_ratio = 0
    
    for question in knowledge_base["questions"]:
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤–∫–ª—é—á–µ–Ω–∏—é —Å–ª–æ–≤
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
        if any(word in question for word in user_message.split()):
            ratio = len(set(question.split()) & set(user_message.split())) / len(set(question.split()))
            if ratio > best_ratio:
                best_ratio = ratio
                best_match = question
    
    if best_match and best_ratio > 0.3:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        answer = knowledge_base["questions"][best_match]["answer"]
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        knowledge_base["questions"][best_match]["used_count"] += 1
        save_knowledge_base(knowledge_base)
        await update.message.reply_text(answer)
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. üòî\n"
            "–ù–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /learn!\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        )

async def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("learn", learn))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
