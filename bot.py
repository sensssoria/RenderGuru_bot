import os
import asyncio
import openai
import logging
import sqlite3
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sentence_transformers import SentenceTransformer

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL", "bot_data.db")

if not API_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ Railway Variables!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
openai.api_key = OPENAI_API_KEY

# NLP-–º–æ–¥–µ–ª—å –¥–ª—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
model = SentenceTransformer("paraphrase-MiniLM-L6-v2")

# –§–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ 3D
allowed_keywords = ["3D", "—Ä–µ–Ω–¥–µ—Ä", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–µ–∫—Å—Ç—É—Ä—ã", "—Å–≤–µ—Ç", "—Å—Ü–µ–Ω–∞", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"]

async def is_relevant_question(question: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ 3D"""
    return any(word.lower() in question.lower() for word in allowed_keywords)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
def init_db():
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT UNIQUE,
            embedding BLOB,
            answer TEXT
        )
    ''')
    conn.commit()
    conn.close()

async def search_in_db(question: str):
    """–ü–æ–∏—Å–∫ –ø–æ —Å–º—ã—Å–ª—É (–≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)"""
    question_embedding = model.encode(question)
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT question, embedding, answer FROM questions")
    rows = cursor.fetchall()
    conn.close()

    best_match = None
    best_score = -1

    for stored_question, embedding_blob, answer in rows:
        stored_embedding = np.frombuffer(embedding_blob, dtype=np.float32)
        score = np.dot(question_embedding, stored_embedding) / (np.linalg.norm(question_embedding) * np.linalg.norm(stored_embedding))

        if score > best_score:
            best_score = score
            best_match = (stored_question, answer)

    if best_match and best_score > 0.85:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
        return best_match[1]
    return None

async def save_to_db(question: str, answer: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–º"""
    question_embedding = model.encode(question).astype(np.float32).tobytes()
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO questions (question, embedding, answer) VALUES (?, ?, ?)", (question, question_embedding, answer))
    conn.commit()
    conn.close()

async def get_openai_answer(question: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI"""
    if not await is_relevant_question(question):
        return "‚ö† –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º."},
                {"role": "user", "content": question}
            ],
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å", callback_data="ask")],
            [InlineKeyboardButton(text="–£—á–∏—Ç—å", callback_data="learn")],
            [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø RenderGuru. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data == "ask":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif callback.data == "learn":
        await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤–æ–º—É! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.")
    elif callback.data == "help":
        await callback.message.answer("–Ø - –±–æ—Ç –ø–æ 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    question = message.text.strip()
    if not question:
        return

    # –ü–æ–∏—Å–∫ –ø–æ —Å–º—ã—Å–ª—É –≤ –±–∞–∑–µ
    answer = await search_in_db(question)
    if answer:
        await message.answer(answer)
    else:
        ai_answer = await get_openai_answer(question)
        await message.answer(ai_answer)
        await save_to_db(question, ai_answer)

# –ó–∞–ø—É—Å–∫ Polling
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç RenderGuru –∑–∞–ø—É—â–µ–Ω...")
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
